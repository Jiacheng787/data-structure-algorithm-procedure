/** 
 * @Author: zhuxiankang 
 * @Date:   2018-10-22 09:19:40  
 * @Desc:   插入排序(不适合对于数据量比较大的排序应用，因为需要不断的挪移位置，适合数据量小的排序)
 */

/** 
插入排序：

插入排序有两个循环。外循环将数组元素挨个移动，而内循环则对外循环中选中的元素及它后面的那个元素进行比较。

如果外循环中选中的元素比内循环中选中的元素小，那么数组元素会向右移动，为内循环中的这个元素腾出位置。




举例说明：要排序数组：let arr= [6,3,8,2,9,1]   

第1趟排序：

默认待插入的数字是3，需要插入的数组是[6], 插入结果为[3,6]

---------------------------------------------------------------------

第2趟排序：

默认待插入的数字是8，需要插入的数组是[3,6], 插入结果为[3,6,8]

---------------------------------------------------------------------

第3趟排序：

默认待插入的数字是2，需要插入的数组是[3,6,8], 插入结果为[2,3,6,8]

---------------------------------------------------------------------

第4趟排序：

默认待插入的数字是9，需要插入的数组是[2,3,6,8], 插入结果为[2,3,6,8,9]


---------------------------------------------------------------------

第5趟排序：

默认待插入的数字是1，需要插入的数组是[2,3,6,8,9], 插入结果为[1,2,3,6,8,9]

---------------------------------------------------------------------

最终结果：1  2  3  6  8  9

---------------------------------------------------------------------

插入排序的时间复杂度是O(n2)。

*/

function insertionSort(arr) {
  var temp, inner
  for (var outer = 1; outer <= arr.length - 1; ++outer) {
    // 待插入的数据
    temp = arr[outer]
    inner = outer
    // 
    // 找到需要插入的位置，其他数据往后移动，并为该位置提供空间
    while (inner > 0 && (arr[inner - 1] >= temp)) {
      arr[inner] = arr[inner - 1]
      --inner
    }

    // 将待插入数据插入适应位置
    arr[inner] = temp
  }
}


let arr = [6,3,8,2,9,1]
insertionSort(arr)
console.log(arr)