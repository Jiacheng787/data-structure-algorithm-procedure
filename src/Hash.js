/** 
 * @Author: zhuxiankang 
 * @Date:   2018-10-10 08:47:12  
 * @Desc:   散列 
 */

/*
散列是一种常用的数据存储技术，散列后的数据可以快速的插入和使用。散列使用的数据结构叫做散列表，在散列上插入、删除和取用数据都非常快。
但是散列的查找操作效率低下（例如查找一组数据中的最大值和最小值，此时采用二叉查找树是一个非常好的选择）。

散列基于数组设计，数组的长度需要预先设定，如果需要可以随时增加。
使用散列表存储数据时，需要通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度，因此散列是一种随机存储的数据结构。

理想情况下散列函数会将每一个键值映射为一个唯一的数组索引，但是键的数量无限，而数组的长度有限，
一个理想的目标是让散列函数尽量将键均匀的映射到数组中。

即使使用一个高效的散列函数，仍然存在将两个键映射成同一个值的可能，这种现象称为碰撞，当碰撞发生时，可以通过特殊的算法解决碰撞问题。
*/


/** 
 * @Author: zhuxiankang 
 * @Date:   2018-10-10 09:13:16  
 * @Desc:   散列表 
 * @Parm:    
 */
function HashTable() {
  // 散列基于数组设计，数组的长度需要预先设定
  // 数组的长度应该是一个质数
  this.table = new Array(137)
}


/** 
 * @Author: zhuxiankang 
 * @Date:   2018-10-10 09:15:34  
 * @Desc:   简单的可能产生碰撞的散列函数(除留余数法)
 * @Parm:    
 */
HashTable.prototype.simpleHash = function (data) {
  var total = 0
  // 如果键是整型，则最简单的散列函数就是以数组的长度对键取余
  // 但是如果数组的长度是10，键值很容易是10的整数倍，那么取余的结果容易导致一致产生碰撞
  // 因此数组的长度最好是质数，取余的结果不容易产生碰撞
  // 如果键是随机的整数，则散列函数应该更为均匀的分布这些键，这种散列方式称为除留余数法
  // 在JavaScript中，键很容易是字符串类型，可以通过将字符串中的每一个字符的ASCII码相加的和除以数组的长度得到的余数作为散列值
  for(var i=0; i<data.length; i++) {
    total += data.charCodeAt(i)
  }
  return total % this.table.length
}




